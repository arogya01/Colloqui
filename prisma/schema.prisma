// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int           @id @default(autoincrement())
  Profile     Profile?
  Message     Message[]
  Participant Participant[]
}

model Profile {
  profile_id  Int      @id @default(autoincrement())
  user        User     @relation(fields: [userId], references: [id])
  userId      Int      @unique
  bio         String?
  image       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  phoneNumber String   @unique
  email       String   @unique
  password    String
  userName    String   @unique
  salt        String
  lastActive  DateTime @default(now())
}

model Conversation {
  id          Int           @id @default(autoincrement())
  name        String? //Optional, can be null for one to one and can have name for group chats.       
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  messages    Message[]
  participant Participant[]
}

model Message {
  id Int @id @default(autoincrement())

  conversationId Int
  senderId       Int
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  sender         User         @relation(fields: [senderId], references: [id])
  media          Media?

  @@index([conversationId])
  @@index([senderId])
}

model Media {
  id        Int       @id @default(autoincrement())
  type      MediaType
  value     String
  thumbnail String?
  messageId Int       @unique
  message   Message   @relation(fields: [messageId], references: [id])
}

enum MediaType {
  IMAGE
  VIDEO
  AUDIO
  DOCUMENT
  LOCATION
  CONTACT
  STICKER
  GIF
  POLL
  EMOJI
  FILE
  LINK
  TEXT
  OTHER
}

model Participant {
  conversationId Int
  userId         Int
  joinedAt       DateTime     @default(now())
  leftAt         DateTime?
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  user           User         @relation(fields: [userId], references: [id])

  @@id([conversationId, userId])
}
